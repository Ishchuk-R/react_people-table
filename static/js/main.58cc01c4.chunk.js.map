{"version":3,"sources":["helper/api.tsx","components/HomePage.tsx","components/Header.tsx","components/PersonName.tsx","components/PersonRow.tsx","components/PeopleTable.tsx","App.tsx","index.tsx"],"names":["getPeople","a","fetch","response","json","people","HomePage","Header","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","querySearch","get","className","exact","to","path","placeholder","value","onChange","e","set","target","push","toString","type","PersonName","name","slug","sex","cn","male","female","PersonRow","person","personName","id","born","died","motherName","mother","father","fatherName","active","PeopleTableHeader","sort","PeopleTable","match","useRouteMatch","params","sortBy","sortPeople","sortParam","b","localeCompare","visiblePeople","useMemo","peopleGeneral","query","patternSearch","RegExp","filter","p","test","getVisiblePeople","map","title","key","Math","random","onClick","App","useState","setPeople","startId","useEffect","then","result","find","f","m","component","render","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.58cc01c4.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\n\nexport const getPeople = async () => {\n  const response = await fetch(API_URL);\n  const people = await response.json();\n\n  return people;\n};\n","import React from 'react';\n\nexport const HomePage = () => {\n  return (\n    <h1>Welcome Home</h1>\n  );\n};\n","import React from 'react';\nimport {\n  NavLink, Route, useHistory, useLocation,\n} from 'react-router-dom';\n\nexport const Header = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const querySearch = searchParams.get('query') || '';\n\n  return (\n    <header className=\"navbar bg-secondary\">\n      <div className=\"container\">\n        <nav>\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/\">Home page</NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink to=\"/people\">People page</NavLink>\n            </li>\n          </ul>\n        </nav>\n        <Route path=\"/people\">\n          <input\n            placeholder=\"Search\"\n            value={querySearch}\n            onChange={(e) => {\n              searchParams.set('query', e.target.value);\n              history.push({\n                search: searchParams.toString(),\n              });\n            }}\n            type=\"text\"\n          />\n        </Route>\n      </div>\n\n\n    </header>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\n\ntype PersonNameType ={\n  name: string;\n  slug: string;\n  sex: string;\n};\n\nexport const PersonName: React.FC<PersonNameType> = ({ name, slug, sex }) => {\n  return (\n    <Link\n      className={cn(\n        `${slug}`,\n        { male: sex === 'm' },\n        { female: sex === 'f' },\n      )}\n      to={`/people/${slug}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { PersonName } from './PersonName';\n\ntype PersonRowProps = {\n  person: PersonCompleted;\n  personName: string;\n};\n\nexport const PersonRow = ({ person, personName }: PersonRowProps) => {\n  const {\n    name, id, sex, born, died, motherName, mother, father, fatherName, slug,\n  } = person;\n\n  return (\n    <tr className={cn('person',\n      { active: personName === slug })}\n    >\n      <th>{id}</th>\n      <th>\n        <PersonName sex={sex} name={name} slug={slug} />\n      </th>\n      <th>{sex}</th>\n      <th>{born}</th>\n      <th>{died}</th>\n      <th>\n        {mother ? (\n          <PersonName sex=\"f\" name={motherName} slug={mother.slug} />\n        ) : (<span>{motherName}</span>)}\n\n      </th>\n      <th>\n        {father ? (\n          <PersonName sex=\"m\" name={fatherName} slug={father.slug} />\n        ) : (<span>{fatherName}</span>)}\n      </th>\n    </tr>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useRouteMatch, useLocation, useHistory } from 'react-router-dom';\nimport { PersonRow } from './PersonRow';\n\nconst PeopleTableHeader = [\n  { name: 'Id', sort: 'id' },\n  { name: 'Name', sort: 'name' },\n  { name: 'Sex', sort: 'sex' },\n  { name: 'Born', sort: 'born' },\n  { name: 'Died', sort: 'died' },\n  { name: 'Mother' },\n  { name: 'Father' },\n];\n\ntype PeopleList = {\n  people: PersonCompleted[];\n};\n\nexport const PeopleTable = ({ people }: PeopleList) => {\n  const match = useRouteMatch<MatchParams>();\n  const location = useLocation();\n  const history = useHistory();\n  const { personName } = match.params;\n\n  const searchParams = new URLSearchParams(location.search);\n\n  const querySearch = searchParams.get('query') || '';\n  const sortBy = searchParams.get('sortBy') || '';\n\n  const getVisiblePeople = (peopleGeneral: PersonCompleted[], query: string) => {\n    const patternSearch = new RegExp(query, 'i');\n\n    return peopleGeneral.filter(p => patternSearch.test(p.name || p.motherName || p.fatherName));\n  };\n\n\n  const sortPeople = (sortParam: string) => {\n    switch (sortParam) {\n      case 'name':\n        return (a: PersonCompleted, b: PersonCompleted) => {\n          return a.name.localeCompare(b.name);\n        };\n\n      case 'id':\n        return (a: PersonCompleted, b: PersonCompleted) => a.id - b.id;\n      case 'sex':\n        return (a: PersonCompleted, b: PersonCompleted) => a.sex.localeCompare(b.sex);\n      case 'born':\n        return (a: PersonCompleted, b: PersonCompleted) => a.born - b.born;\n      default:\n        return (a: PersonCompleted, b: PersonCompleted) => a.died - b.died;\n    }\n  };\n\n  const visiblePeople = useMemo(() => {\n    return [...getVisiblePeople(people, querySearch)].sort(sortPeople(sortBy));\n  }, [querySearch, sortBy, people]);\n\n\n  const Sort = (sort: string) => {\n    if (sort) {\n      searchParams.set('sortBy', sort);\n      history.push({\n        search: searchParams.toString(),\n      });\n      sortPeople(sort);\n    }\n  };\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr className=\"table-primary\">\n          {PeopleTableHeader.map((title: Title) => (\n            <th\n              key={title.name + Math.random}\n              onClick={() => {\n                Sort(title.sort || '');\n              }}\n            >\n              {title.name}\n              {sortBy === title.sort && '*' }\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {visiblePeople.map((person) => (\n          <PersonRow personName={personName} person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { getPeople } from './helper/api';\n\nimport './App.css';\n\n\nimport { HomePage } from './components/HomePage';\nimport { Header } from './components/Header';\nimport { PeopleTable } from './components/PeopleTable';\n\nconst App = () => {\n  const [people, setPeople] = useState<PersonCompleted[]>([]);\n  let startId = 1;\n\n  useEffect(() => {\n    getPeople()\n      .then(result => (\n        setPeople(result.map((person: PersonCompleted) => (\n          {\n            ...person,\n            id: startId++,\n            father: result.find((f: PersonCompleted) => f.name === person.fatherName),\n            mother: result.find((m: PersonCompleted) => m.name === person.motherName),\n          }\n        )))\n      ));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <div className=\"container content-container\">\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route\n            path=\"/people/:personName?\"\n            render={() => (\n              <PeopleTable people={people} />)}\n          />\n          <Redirect from=\"/home\" to=\"/\" />\n          <Route>\n            <h1>Page not found</h1>\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}